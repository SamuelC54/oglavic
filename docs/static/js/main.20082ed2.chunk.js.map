{"version":3,"sources":["components/Score/index.js","services/score.js","service/heatmap.js","mapStyle.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Percent","_templateObject2","Score","percent","this","props","strokeColor","react_default","a","createElement","style","color","es","strokeWidth","Component","RANDOM_WEIGHT","LOCALISATION_WEIGHT","SLEEP_WEIGHT","BPM_WEIGHT","sleepHours","getScore","random","Math","floor","localisation","sleep","bpm","round","arbres","require","mapStyle","featureType","elementType","stylers","saturation","lightness","visibility","weight","MyMapComponent","withScriptjs","withGoogleMap","arbres_layer","arbres_arr","i","length","push","parseFloat","getGreenSpaces","arbres_layer_coords","_","map","_ref","Longitude","Latitude","google","maps","LatLng","slice","features","GrandParcs","grandParsCoords","_ref2","geometry","coordinates","lieuxCulturelsCoords","Cultures","_ref3","lib","options","disableDefaultUI","styles","scaleControl","scrollwheel","defaultZoom","defaultCenter","lat","lng","HeatmapLayer_default","radius","opacity","gradient","data","Page","App_templateObject","Background","App_templateObject2","OverlayBackground","_templateObject3","Overlay","_templateObject4","Header","_templateObject5","TitleSection","_templateObject6","TitleRow","_templateObject7","Title","_templateObject8","SubTitle","_templateObject9","StyledChevronDownIcon","ChevronDownIcon","_templateObject10","Footer","_templateObject11","Paper","_templateObject12","dark","css","_templateObject13","FooterTitle","_templateObject14","PaperSection","_templateObject15","Label","_templateObject16","Text","_templateObject17","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setScore","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","setState","stop","state","clearInterval","interval","components_Score","isMarkerShown","googleMapURL","loadingElement","containerElement","mapElement","ArrowLeftIcon_default","CrosshairsGpsIcon_default","TreeIcon_default","CloudIcon_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20082ed2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Circle } from 'rc-progress';\r\n\r\nconst Container = styled.div`\r\n    width: 50px;\r\n    height: 50px;\r\n`\r\n\r\nconst Percent = styled.div`\r\n    font-size: 16px;\r\n    margin-bottom: 4px;\r\n`\r\nclass Score extends Component {\r\n  render() {\r\n    const { percent } = this.props;\r\n    let strokeColor = \"#82dd11\";\r\n    if(percent > 40)\r\n        strokeColor = \"#ddb411\";\r\n    if(percent > 75)\r\n        strokeColor = \"#dd1711\"\r\n\r\n    return (    \r\n        <Container>\r\n            <Percent style={{ color: strokeColor }}>{percent} %</Percent>\r\n            <Circle percent={percent} strokeWidth=\"2\" strokeColor={strokeColor} />\r\n        </Container> \r\n    );\r\n  }\r\n}\r\n\r\nexport default Score;\r\n","import moment from 'moment';\r\n\r\nconst RANDOM_WEIGHT = 0.05;\r\nconst LOCALISATION_WEIGHT = 0.9;\r\nconst SLEEP_WEIGHT = 0;\r\nconst BPM_WEIGHT = 0.01;\r\nconst DAY_LENGHT_WEIGHT = 0.02;\r\nconst TIME_WEIGHT = 0.02;\r\n\r\nlet sleepHours = null;\r\n\r\nexport function getScore() {\r\n    const random = (Math.floor(Math.random() * 100) + 1)*RANDOM_WEIGHT;\r\n    const localisation = calculateLocationScore();\r\n    const sleep = calculateSleepHours();\r\n    const bpm = calculateBPMScore();\r\n\r\n    return Math.round(random + localisation + sleep + bpm);\r\n}\r\n\r\nfunction getBPM() {\r\n    return 75;\r\n}\r\n\r\nfunction calculateBPMScore() {\r\n    return getBPM()*BPM_WEIGHT;\r\n}\r\n\r\nfunction askSleepHours() {\r\n    return 8;\r\n}\r\n\r\nfunction getSleepHours() {\r\n    if(sleepHours == null) {\r\n        sleepHours = askSleepHours();\r\n    }\r\n    return sleepHours;\r\n}\r\n\r\nfunction calculateSleepHours() {\r\n    return getSleepHours()*SLEEP_WEIGHT;\r\n}\r\n\r\nfunction getLocalisationScore() {\r\n    return 55;\r\n}\r\n\r\nfunction calculateLocationScore() {\r\n    return getLocalisationScore()*LOCALISATION_WEIGHT;\r\n}\r\n\r\nfunction getLocalisation() {\r\n    //return gps coordinate\r\n}\r\n\r\nfunction getTime() {\r\n    //get currentTime\r\n    return new Date();\r\n}\r\n\r\nfunction getDayLength() {\r\n    //get sunshine interval\r\n    return { start: moment().startOf('day').fromNow(), end: moment().endOf('day').fromNow() }\r\n}\r\n\r\nfunction calculateDayLength() {\r\n    \r\n}\r\n\r\n","const arbres = require(\"./arbres-publics.json\");\r\n\r\nexport function getGreenSpaces() {\r\n  var arbres_arr = [];\r\n  // console.log(arbres[0])\r\n  for (var i = 0; i < arbres.length; i++)\r\n    arbres_arr.push([\r\n      parseFloat(arbres[i][\"Longitude\"]),\r\n      parseFloat(arbres[i][\"Latitude\"])\r\n    ]);\r\n  // console.log(arbres_arr)\r\n  return arbres;\r\n}\r\n","export default [\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [\r\n      {\r\n        saturation: 36\r\n      },\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 40\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [\r\n      {\r\n        visibility: \"on\"\r\n      },\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 16\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.icon\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"administrative\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"administrative\",\r\n    elementType: \"geometry.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 17\r\n      },\r\n      {\r\n        weight: 1.2\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"landscape\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"poi\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 21\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 17\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 29\r\n      },\r\n      {\r\n        weight: 0.2\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.arterial\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 18\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.local\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 16\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"transit\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 19\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"water\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\"\r\n      },\r\n      {\r\n        lightness: 17\r\n      }\r\n    ]\r\n  }\r\n];\r\n","/*global google*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport Score from \"./components/Score\";\r\nimport { getScore } from \"./services/score\";\r\nimport styled, { css } from \"styled-components\";\r\nimport _ from \"lodash\";\r\n\r\nimport { getGreenSpaces } from \"./service/heatmap\";\r\nimport GrandParcs from \"./grandsparcs\";\r\nimport Cultures from \"./lieuxculturels\";\r\n\r\nimport ArrowLeftIcon from \"mdi-react/ArrowLeftIcon\";\r\nimport ChevronDownIcon from \"mdi-react/ChevronDownIcon\";\r\nimport CrosshairsGpsIcon from \"mdi-react/CrosshairsGpsIcon\";\r\nimport TreeIcon from \"mdi-react/TreeIcon\";\r\nimport CloudIcon from \"mdi-react/CloudIcon\";\r\n\r\nimport {\r\n  GoogleMap,\r\n  withGoogleMap,\r\n  withScriptjs,\r\n  OverlayView\r\n} from \"react-google-maps\";\r\n\r\nimport HeatmapLayer from \"react-google-maps/lib/components/visualization/HeatmapLayer\";\r\nimport mapStyle from \"./mapStyle\";\r\n\r\nconst MyMapComponent = withScriptjs(\r\n  withGoogleMap(props => {\r\n    // console.log(\"props\", props);\r\n    const arbres_layer = getGreenSpaces();\r\n\r\n    var arbres_layer_coords = _.map(arbres_layer, ({ Longitude, Latitude }) => {\r\n      return new google.maps.LatLng(\r\n        parseFloat(Latitude),\r\n        parseFloat(Longitude)\r\n      );\r\n    });\r\n\r\n    arbres_layer_coords = arbres_layer_coords.slice(0, 5000);\r\n\r\n    const features = GrandParcs.features;\r\n    const grandParsCoords = _.map(features, ({ geometry }) => {\r\n      return new google.maps.LatLng(\r\n        geometry.coordinates[0][0][0][1],\r\n        geometry.coordinates[0][0][0][0]\r\n      );\r\n    });\r\n\r\n    const lieuxCulturelsCoords = _.map(Cultures, ({ Longitude, Latitude }) => {\r\n      return new google.maps.LatLng(\r\n        parseFloat(Latitude),\r\n        parseFloat(Longitude)\r\n      );\r\n    });\r\n\r\n    return (\r\n      <GoogleMap\r\n        options={{\r\n          disableDefaultUI: true,\r\n          styles: mapStyle,\r\n          scaleControl: false,\r\n          scrollwheel: false\r\n        }}\r\n        defaultZoom={13}\r\n        defaultCenter={{ lat: 45.5017, lng: -73.5673 }}\r\n      >\r\n        <HeatmapLayer\r\n          options={{\r\n            radius: 200,\r\n            opacity: 0.2,\r\n            gradient: [\"rgba(0, 255, 0, 0)\", \"rgba(0, 255, 0, 1)\"]\r\n          }}\r\n          data={grandParsCoords}\r\n        />\r\n        <HeatmapLayer\r\n          options={{\r\n            radius: 100,\r\n            opacity: 0.2,\r\n            gradient: [\"rgba(255, 0, 0, 0)\", \"rgba(0, 255, 0, 1)\"]\r\n          }}\r\n          data={lieuxCulturelsCoords}\r\n        />\r\n        <HeatmapLayer\r\n          options={{\r\n            radius: 50,\r\n            opacity: 0.2,\r\n            gradient: [\"rgba(0, 0, 255, 0)\", \"rgba(0, 0, 255, 1)\"]\r\n          }}\r\n          data={arbres_layer_coords}\r\n        />\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n\r\nfunction parse_points(points_p) {\r\n  var res = [];\r\n  for (var i = 0; i < points_p.length; i++) {\r\n    res.push(new google.maps.LatLng(points_p[i][1], points_p[i][0]));\r\n  }\r\n  // console.log(res);\r\n  return res;\r\n}\r\n\r\nconst Page = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Background = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 0;\r\n`;\r\nconst OverlayBackground = styled.div`\r\n  pointer-events: none;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1;\r\n  background: linear-gradient(\r\n    to bottom,\r\n    #2b2b2b 0%,\r\n    #2b2b2b 5%,\r\n    rgba(0, 0, 0, 0) 30%,\r\n    rgba(0, 0, 0, 0) 70%,\r\n    #2b2b2b 95%,\r\n    #2b2b2b 100%\r\n  );\r\n`;\r\nconst Overlay = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  pointer-events: none;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 80px;\r\n  padding: 0 16px;\r\n`;\r\nconst TitleSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst TitleRow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst Title = styled.div`\r\n  font-family: \"Montserrat\";\r\n  /* text-transform: uppercase; */\r\n  color: rgba(255, 255, 255, 0.95);\r\n`;\r\nconst SubTitle = styled.div`\r\n  font-family: \"Montserrat\";\r\n  text-transform: uppercase;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\nconst StyledChevronDownIcon = styled(ChevronDownIcon)`\r\n  margin-bottom: 2px;\r\n`;\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0px 0px 24px 24px;\r\n`;\r\nconst Paper = styled.div`\r\n  height: 70px;\r\n  width: 450px;\r\n  background: #404040;\r\n  border-radius: 7px;\r\n  margin-right: 12px;\r\n  padding: 12px;\r\n\r\n  ${props =>\r\n    props.dark &&\r\n    css`\r\n      background: #353535;\r\n    `}\r\n`;\r\nconst FooterTitle = styled.div`\r\n  font-size: 13px;\r\n  margin-bottom: 7px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  font-family: \"Roboto\";\r\n`;\r\nconst PaperSection = styled.div`\r\n  display: flex;\r\n`;\r\nconst Label = styled.div`\r\n  font-size: 13px;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  font-family: \"Roboto\";\r\n`;\r\nconst Text = styled.div`\r\n  font-size: 14px;\r\n  color: white;\r\n  font-family: \"Roboto\";\r\n`;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      percent: null\r\n    };\r\n  }\r\n\r\n  setScore = async () => {\r\n    const percent = await getScore();\r\n    this.setState({ percent });\r\n  };\r\n\r\n  componentDidMount() {\r\n    //this.interval = setInterval(this.setScore, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const score =\r\n      this.state.percent != null ? <Score percent={this.state.percent} /> : \"\";\r\n\r\n    return (\r\n      <Page>\r\n        <MyMapComponent\r\n          isMarkerShown={false}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDRNFsKxPqxoogoI3YnxxcdQVETC8P7bVE&libraries=geometry,drawing,places,visualization\"\r\n          loadingElement={<Background />}\r\n          containerElement={<Background />}\r\n          mapElement={<Background />}\r\n        />\r\n        <OverlayBackground />\r\n        <Overlay>\r\n          <Header>\r\n            <ArrowLeftIcon color={\"rgba(255, 255, 255, 0.95)\"} />\r\n            <TitleSection>\r\n              <SubTitle>Location</SubTitle>\r\n              <TitleRow>\r\n                <Title>Montreal, Canada</Title>\r\n                <StyledChevronDownIcon color={\"rgba(255,255,255,0.5)\"} />\r\n              </TitleRow>\r\n            </TitleSection>\r\n            <CrosshairsGpsIcon color={\"rgba(255, 255, 255, 0.95)\"} />\r\n          </Header>\r\n          <Footer>\r\n            <FooterTitle>Analytic Data</FooterTitle>\r\n            <PaperSection>\r\n              <Paper>\r\n                <TreeIcon color={\"#00FF00AA\"} />\r\n                <Label>Vegetation Level</Label>\r\n                <Text>\r\n                  120 tree/m<sup>2</sup>\r\n                </Text>\r\n              </Paper>\r\n              <Paper dark>\r\n                <CloudIcon color={\"#AAAAAA\"} />\r\n                <Label>Smog Level</Label>\r\n                <Text>125 ppb</Text>\r\n              </Paper>\r\n            </PaperSection>\r\n          </Footer>\r\n        </Overlay>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}